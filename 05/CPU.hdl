// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // c-instruction:
    //   1   1   1   a   c   c   c   c   c   c   d   d   d   j   j   j
    //              a/m  zx  nx  zy  ny  f  no   a   d   m   ng  zr  gr

    And(a=instruction[15], b=instruction[5], out=wa);   // write to A register
    And(a=instruction[15], b=instruction[4], out=wd);   // write to D register
    And(a=instruction[15], b=instruction[3], out=writeM);   // write to Memory
    And(a=instruction[15], b=instruction[2], out=jng);   // jump if output is negative
    And(a=instruction[15], b=instruction[1], out=jzr);   // jump if output is equals to zero
    And(a=instruction[15], b=instruction[0], out=jgt);   // jump if output is greater than zero

    Not(in=instruction[15], out=ains);  // A-instruction

    // if it's an A-instruction (instruction[15] == 0),
    // or it's an C-instruction (instruction[15] == 1), 
    // and the destination of the instruction includes A register (instruction[5] == 1),
    // write it to A register.
    Mux16(a=instruction, b=output, sel=instruction[15], out=aregin);
    Or(a=ains, b=wa, out=aregload);
    ARegister(in=aregin, load=aregload, out=aregout, out[0..14]=addressM);

    // if the destination of the instruction includes D register (instruction[4] == 1),
    // write it to D register.
    DRegister(in=output, load=wd, out=dregout);

    // if it's a C-instruction,
    // and if a == 0, send A register to ALU,
    // else send M to ALU.
    Mux16(a=aregout, b=inM, sel=instruction[12], out=am);
    ALU(
        x=dregout, y=am,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=output, out=outM,
        out[0..7]=gbp, out[8..15]=lbp,
        zr=zr, ng=ng
    );

    // if it's C-instruction and the destination of instruction includes Memory,
    // send the output of ALU to Memory.

    // jump conditions
    Not(in=ng, out=notng);
    Or8Way(in=gbp, out=p1); Or8Way(in=lbp, out=p2); Or(a=p1, b=p2, out=p3);
    And(a=p3, b=notng, out=gt);

    And(a=jng, b=ng, out=jmpng);
    And(a=jzr, b=zr, out=jmpzr);
    And(a=jgt, b=gt, out=jmpgt);
    Or(a=jmpng, b=jmpzr, out=t1);
    Or(a=t1, b=jmpgt, out=jmp);
    Not(in=jmp, out=inc);
    PC(in=aregout, load=jmp, inc=inc, reset=reset, out[0..14]=pc);
}
